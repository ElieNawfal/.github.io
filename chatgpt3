import { LitElement, html } from 'lit-element';
import { chatGPT } from 'chat-gpt';

class ChatGPT extends LitElement {
  static get properties() {
    return {
      question: { type: String },
      answer: { type: String },
      chatHistory: { type: Array },
    };
  }

  constructor() {
    super();
    this.chatHistory = [];
  }

  askQuestion(question) {
    if (!question) {
      throw new Error('Question cannot be empty');
    }

    this.answer = chatGPT.askQuestion(question);
    this.chatHistory.push({
      question: question,
      answer: this.answer,
    });
  }

  clearChatHistory() {
    this.chatHistory = [];
  }

  exportChatHistory() {
    const csvData = this.chatHistory.map((item) => [item.question, item.answer]);
    const csv = csvData.join('\n');

    const blob = new Blob([csv], { type: 'text/csv' });
    const link = document.createElement('a');
    link.href = window.URL.createObjectURL(blob);
    link.download = 'chat_history.csv';
    link.click();
  }

  render() {
    return html`
      <input type="text" placeholder="Enter your question" value="${this.question}" />
      <button @click="askQuestion">Ask Question</button>
      <p>The answer is: ${this.answer}</p>
      <ul>
        ${this.chatHistory.map((item) => html`
          <li>
            <strong>Question:</strong> ${item.question}
            <strong>Answer:</strong> ${item.answer}
          </li>
        `)}
      </ul>
      <button @click="clearChatHistory">Clear Chat History</button>
      <button @click="exportChatHistory">Export Chat History</button>
    `;
  }
}

customElements.define('chat-gpt', ChatGPT);
